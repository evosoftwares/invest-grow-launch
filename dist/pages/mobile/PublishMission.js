import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useNavigate } from "react-router-dom";
const PublishMission = () => {
    const navigate = useNavigate();
    const [formData, setFormData] = useState({
        title: '',
        description: '',
        address: '',
        value: '',
        estimatedTime: '',
        category: ''
    });
    const [selectedTemplate, setSelectedTemplate] = useState('');
    const categories = [
        { id: 'delivery', name: 'Entrega' },
        { id: 'transport', name: 'Transporte' },
        { id: 'photo', name: 'Fotografia' },
        { id: 'cleaning', name: 'Limpeza' },
        { id: 'maintenance', name: 'Manutenção' },
        { id: 'shopping', name: 'Compras' },
        { id: 'consulting', name: 'Consultoria' },
        { id: 'design', name: 'Design' },
        { id: 'writing', name: 'Redação' },
        { id: 'translation', name: 'Tradução' }
    ];
    const checklistTemplates = [
        { id: 'basic', name: 'Básico', items: ['Chegada no local', 'Conclusão da tarefa', 'Foto de comprovação'] },
        { id: 'delivery', name: 'Entrega', items: ['Recebimento do item', 'Verificação do endereço', 'Entrega realizada', 'Assinatura do destinatário'] },
        { id: 'transport', name: 'Transporte', items: ['Chegada pontual', 'Verificação do passageiro', 'Destino alcançado', 'Avaliação do serviço'] }
    ];
    const handleSubmit = () => {
        // Simulate mission creation
        navigate('/mobile/client-dashboard');
    };
    return (_jsxs("div", { className: "min-h-screen bg-gradient-to-br from-slate-50 to-blue-50", children: [_jsx("div", { className: "sticky top-0 z-10 bg-white/95 backdrop-blur-md shadow-sm border-b border-slate-200", children: _jsxs("div", { className: "flex items-center gap-3 px-4 py-3", children: [_jsx(Button, { variant: "ghost", size: "icon", onClick: () => navigate('/mobile/client-dashboard'), className: "hover:bg-slate-100 rounded-full", children: _jsx("span", { children: "\u2190" }) }), _jsx("img", { src: "/lovable-uploads/aa2570db-abbc-4ebd-8d58-1d58c9570128.png", alt: "Logo", className: "h-6" }), _jsx("h1", { className: "text-xl font-semibold text-slate-800", children: "Nova Miss\u00E3o" })] }) }), _jsx("div", { className: "pb-24", children: _jsxs("div", { className: "px-4 py-6 space-y-6 max-w-2xl mx-auto", children: [_jsxs(Card, { className: "border-slate-200 bg-white/95 backdrop-blur-sm shadow-sm", children: [_jsx(CardHeader, { className: "pb-4", children: _jsxs(CardTitle, { className: "text-lg font-semibold text-slate-800 flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-blue-500 rounded-full" }), "Informa\u00E7\u00F5es da Miss\u00E3o"] }) }), _jsxs(CardContent, { className: "space-y-5", children: [_jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "title", className: "text-sm font-medium text-slate-700", children: "T\u00EDtulo da Miss\u00E3o" }), _jsx(Input, { id: "title", placeholder: "Ex: Entrega de documento urgente", value: formData.title, onChange: (e) => setFormData(Object.assign(Object.assign({}, formData), { title: e.target.value })), className: "border-slate-200 focus:border-blue-400 focus:ring-2 focus:ring-blue-100 h-11" })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "description", className: "text-sm font-medium text-slate-700", children: "Descri\u00E7\u00E3o Detalhada" }), _jsx(Textarea, { id: "description", placeholder: "Descreva detalhadamente o que precisa ser feito, incluindo requisitos espec\u00EDficos, materiais necess\u00E1rios, etc.", value: formData.description, onChange: (e) => setFormData(Object.assign(Object.assign({}, formData), { description: e.target.value })), className: "border-slate-200 focus:border-blue-400 focus:ring-2 focus:ring-blue-100 min-h-[120px] resize-none" })] })] })] }), _jsxs(Card, { className: "border-slate-200 bg-white/95 backdrop-blur-sm shadow-sm", children: [_jsx(CardHeader, { className: "pb-4", children: _jsxs(CardTitle, { className: "text-lg font-semibold text-slate-800 flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-green-500 rounded-full" }), "Localiza\u00E7\u00E3o e Remunera\u00E7\u00E3o"] }) }), _jsxs(CardContent, { className: "space-y-5", children: [_jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "address", className: "text-sm font-medium text-slate-700", children: "Endere\u00E7o Completo" }), _jsx(Input, { id: "address", placeholder: "Rua, n\u00FAmero, bairro, cidade, CEP", value: formData.address, onChange: (e) => setFormData(Object.assign(Object.assign({}, formData), { address: e.target.value })), className: "border-slate-200 focus:border-blue-400 focus:ring-2 focus:ring-blue-100 h-11" })] }), _jsxs("div", { className: "grid grid-cols-2 gap-4", children: [_jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "value", className: "text-sm font-medium text-slate-700", children: "Valor (R$)" }), _jsxs("div", { className: "relative", children: [_jsx("span", { className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-500 text-sm", children: "R$" }), _jsx(Input, { id: "value", type: "number", placeholder: "0,00", value: formData.value, onChange: (e) => setFormData(Object.assign(Object.assign({}, formData), { value: e.target.value })), className: "border-slate-200 focus:border-blue-400 focus:ring-2 focus:ring-blue-100 h-11 pl-10" })] })] }), _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "time", className: "text-sm font-medium text-slate-700", children: "Tempo Estimado" }), _jsx(Input, { id: "time", placeholder: "Ex: 2h, 30min", value: formData.estimatedTime, onChange: (e) => setFormData(Object.assign(Object.assign({}, formData), { estimatedTime: e.target.value })), className: "border-slate-200 focus:border-blue-400 focus:ring-2 focus:ring-blue-100 h-11" })] })] })] })] }), _jsxs(Card, { className: "border-slate-200 bg-white/95 backdrop-blur-sm shadow-sm", children: [_jsx(CardHeader, { className: "pb-4", children: _jsxs(CardTitle, { className: "text-lg font-semibold text-slate-800 flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-purple-500 rounded-full" }), "Categoria"] }) }), _jsx(CardContent, { children: _jsxs("div", { className: "space-y-2", children: [_jsx(Label, { htmlFor: "category", className: "text-sm font-medium text-slate-700", children: "Tipo de Servi\u00E7o" }), _jsxs(Select, { value: formData.category, onValueChange: (value) => setFormData(Object.assign(Object.assign({}, formData), { category: value })), children: [_jsx(SelectTrigger, { className: "w-full border-slate-200 focus:border-blue-400 focus:ring-2 focus:ring-blue-100 bg-white h-11", children: _jsx(SelectValue, { placeholder: "Escolha uma categoria" }) }), _jsx(SelectContent, { className: "bg-white border-slate-200 shadow-lg z-50", children: categories.map((category) => (_jsx(SelectItem, { value: category.id, className: "hover:bg-blue-50 focus:bg-blue-50 cursor-pointer", children: category.name }, category.id))) })] })] }) })] }), _jsxs(Card, { className: "border-slate-200 bg-white/95 backdrop-blur-sm shadow-sm", children: [_jsxs(CardHeader, { className: "pb-4", children: [_jsxs(CardTitle, { className: "text-lg font-semibold text-slate-800 flex items-center gap-2", children: [_jsx("div", { className: "w-2 h-2 bg-orange-500 rounded-full" }), "Template de Checklist"] }), _jsx("p", { className: "text-sm text-slate-600 mt-1", children: "Selecione um modelo para facilitar a verifica\u00E7\u00E3o da miss\u00E3o" })] }), _jsx(CardContent, { className: "space-y-3", children: checklistTemplates.map((template) => (_jsxs("div", { className: `p-4 border-2 rounded-lg cursor-pointer transition-all duration-200 ${selectedTemplate === template.id
                                            ? 'border-blue-400 bg-blue-50'
                                            : 'border-slate-200 hover:border-slate-300 hover:bg-slate-50'}`, onClick: () => setSelectedTemplate(template.id), children: [_jsxs("div", { className: "flex items-center justify-between mb-2", children: [_jsx("h4", { className: "font-semibold text-slate-800", children: template.name }), _jsx("div", { className: `w-4 h-4 rounded-full border-2 ${selectedTemplate === template.id
                                                            ? 'border-blue-500 bg-blue-500'
                                                            : 'border-slate-300'}`, children: selectedTemplate === template.id && (_jsx("div", { className: "w-full h-full flex items-center justify-center", children: _jsx("div", { className: "w-2 h-2 bg-white rounded-full" }) })) })] }), _jsx("ul", { className: "text-sm text-slate-600 space-y-1", children: template.items.map((item, index) => (_jsxs("li", { className: "flex items-start gap-2", children: [_jsx("span", { className: "text-blue-500 mt-1", children: "\u2022" }), _jsx("span", { children: item })] }, index))) })] }, template.id))) })] })] }) }), _jsx("div", { className: "fixed bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-white via-white/95 to-transparent", children: _jsx("div", { className: "max-w-2xl mx-auto", children: _jsx(Button, { onClick: handleSubmit, className: "w-full h-14 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white text-lg font-semibold shadow-lg hover:shadow-xl transition-all duration-200 rounded-xl", children: "Publicar Miss\u00E3o" }) }) })] }));
};
export default PublishMission;
